#!/usr/bin/env bash -e
# (c) Copyright 2016 Anil Madhavapeddy <anil@recoil.org>
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

usage () {
  c=`basename $0`
  echo "Usage:"
  echo "  $c init [<options>] [<name>] [<srcdir>]"
  echo "  $c list"
  echo "  $c shell [<options>] <name>"
  echo "  $c reset [<name>]"
  echo "  $c save [<name>]"
  echo "  $c update"
  echo
  echo "General options:"
  echo " -n: dry run, just echo commands"
  echo
  echo "Init options:"
  echo " -j: number of concurrent OPAM jobs"
  echo " -d: Distro (debian,ubuntu,centos,fedora,alpine)"
  echo " -a: CPU arch (x86_64,arm)"
  echo " -v: OCaml compiler version (4.01.0,4.02.3)"
  echo " -r: Custom local OPAM repository directory"
  echo " <name>: OPAM project name (default: default)"
  echo " <srcdir>: Local source directory (default: .)"
  echo
  echo "$c reset: rebuilds all the local containers from scratch"
  echo "$c save: commits changes to a local image"
  echo "$c update: updates the dopam script with latest from GitHub"
  exit 1
}

REPO=ocaml/opam
ARCH=x86_64
DISTRO=debian
VERSION=4.02.3
OPAM_REPO=
JOBS=${JOBS:-2}
DRY=

CMD=$1
[ -z "$CMD" ] && usage
shift


while getopts "a:d:v:j:r:n" o; do
  case "${o}" in
    "a") ARCH="${OPTARG}" ;;
    "d") DISTRO="${OPTARG}" ;;
    "r") OPAM_REPO="${OPTARG}" ;;
    "v") VERSION="${OPTARG}" ;;
    "j") JOBS=${OPTARG} ;;
    "n") DRY="echo" ;;
    "h") usage ;;
    *) usage ;;
  esac
done
[ -t 1 ] && TTY="-t"
case "${ARCH},${DISTRO}" in
  "x86_64,ubuntu") LTAG="ubuntu-15.10" ;;
  "x86_64,debian") LTAG="debian-stable" ;;
  "x86_64,centos") LTAG="centos-7" ;;
  "x86_64,fedora") LTAG="fedora-23" ;;
  "x86_64,alpine") LTAG="alpine-3.3" ;;
  "arm,debian") LTAG="raspbian-8" ;;
  *) echo "Unknown (arch ${ARCH} / distro ${DISTRO}) combination"; exit 1;;
esac
TAG="${LTAG}_ocaml-${VERSION}"
PROJECT=${@:$OPTIND:1}
[ -n "${PROJECT}" ] || PROJECT="default"
NAME="opam-${PROJECT}"
LABEL="org.ocaml.opam.type=local"

run_shell () {
  ${DRY} docker exec ${NAME} sh -c \
    "echo 'export PS1=\"\[\033[38;5;11m\]${PROJECT}\[$(tput sgr0)\]:${DISTRO}:${ARCH}:${VERSION}:\w$ \"' > ~/.bashrc"
  ${DRY} docker exec -i ${TTY} ${NAME} opam config exec -- sh -c "cd /home/opam/src && bash -i"
}

case $CMD in
init)
  SRCDIR=${@:$OPTIND+1:1}
  [ -n "$SRCDIR" ] || SRCDIR=`pwd`
  if [ ! -d "${SRCDIR}" ]; then
    echo ${SRCDIR} does not exist.
    exit 1
  fi
  CONTAINER=`docker ps -q --filter=name=${NAME}`
  CMDLINE="-v ${SRCDIR}:/home/opam/src"
  if [ -e "$HOME/.gitconfig" ]; then
    CMDLINE="$CMDLINE -v $HOME/.gitconfig:/home/opam/.gitconfig"
  fi
  if [ -d "$HOME/.ssh" ]; then
    CMDLINE="$CMDLINE -v $HOME/.ssh:/home/opam/.ssh"
  fi
  if [ -e "$HOME/.pinata-sshd/agent_socket_path" ]; then
    CMDLINE="$CMDLINE $(pinata-ssh-mount)"
  fi
  if [ "$OPAM_REPO" != "" ]; then
    if [ -d "$OPAM_REPO" ]; then
      CMDLINE="$CMDLINE -v $OPAM_REPO:/home/opam/opam-repository"
      OPAM_UPDATE_REQUIRED=1
    else
      echo Local OPAM repo $OPAM_REPO not found
      exit 1
    fi
  fi
  if [ -n "${CONTAINER}" ]; then
    echo ${PROJECT} already exists, resetting state.
    ${DRY} docker stop -t=1 ${NAME} > /dev/null
    ${DRY} docker rm ${NAME}
  fi
  echo "==> Updating upstream images from ${REPO}:${TAG}"
  ${DRY} docker pull ${REPO}:${TAG}
  echo "==> Starting container ${NAME}"
  ${DRY} docker run --name ${NAME} ${CMDLINE} ${TTY} ${TTY} -d \
    -l org.ocaml.opam.srcdir=${SRCDIR} \
    -l org.ocaml.opam.arch=${ARCH} \
    -l org.ocaml.opam.distro=${DISTRO} \
    -l org.ocaml.opam.version=${VERSION} \
    -l ${LABEL} \
    --restart=unless-stopped ${REPO}:${TAG} tail -f /dev/null || \
    (printf "Docker run failed\n" && exit 1)
  if [ -n "$OPAM_UPDATE_REQUIRED" ]; then
    echo "==> Updating OPAM repository"
    ${DRY} docker exec -i ${NAME} opam update -uy
  fi
  if [ -e "${SRCDIR}/opam" ]; then
    echo "==> Customising container with pins"
    ${DRY} docker exec -i ${NAME} opam pin --yes -k auto -n add ${PROJECT} /home/opam/src
    ${DRY} docker exec -i ${NAME} opam config exec -- opam-depext -u ${PROJECT}
    ${DRY} docker exec -i ${NAME} opam install -y -v -j ${JOBS} --deps-only ${PROJECT}
  fi
  run_shell
  ;;
shell)
  CONTAINER=`docker ps -q --filter=name=${NAME}`
  if [ "${CONTAINER}" = "" ]; then
    echo "Container '${NAME}' does not exist. Run:"
    echo "    $0 init ${NAME} <src>"
    echo "to initialise it."
    exit 1
  fi
  run_shell
  ;;
reset)
  p=${@:$OPTIND:1}
  if [ "$p" = "" ]; then
    CONTAINERS=`docker ps -q --filter=label=${LABEL} --format="{{.Names}}"`
    echo "==> Resetting all containers:"
  else
    C=`docker ps -q --filter=label=${LABEL} --filter=name=${p}`
    if [ "$C" = "" ]; then
      echo Unknown project $p
      exit 1
    else
      echo "==> Resetting ${p}"
    fi
    CONTAINERS=${p}
  fi
  for c in ${CONTAINERS}; do
    echo -n " ==> $c: stop..."
    ${DRY} docker stop -t=1 ${c} > /dev/null
    echo -n "rm..."
    ${DRY} docker rm ${c} > /dev/null
    echo "ok"
  done
  echo " ==> done"
  exit 0
  ;;
list)
  echo Active switches:
  C=`docker ps -q --filter=label=${LABEL} --format="{{.Names}}"`
  for i in ${C}; do
    x=`echo $i | sed 's,^opam-,,g'`
    dir=`docker inspect -f '{{index .Config.Labels "org.ocaml.opam.srcdir"}}' $i`
    distro=`docker inspect -f '{{index .Config.Labels "org.ocaml.opam.distro"}}' $i`
    arch=`docker inspect -f '{{index .Config.Labels "org.ocaml.opam.arch"}}' $i`
    ver=`docker inspect -f '{{index .Config.Labels "org.ocaml.opam.version"}}' $i`
    echo " ==> $x in $dir with OCaml $ver on $distro/$arch"
  done
  exit 0 ;;
save)
  p=${@:$OPTIND:1}
  if [ "$p" = "" ]; then
    CONTAINERS=`docker ps -q --filter=label=${LABEL} --format="{{.Names}}"`
    echo "==> Saving all containers:"
  else
    C=`docker ps -q --filter=label=${LABEL} --filter=name=${p}`
    if [ "$C" = "" ]; then
      echo Unknown project $p
      exit 1
    else
      echo "==> Saving ${p}"
    fi
    CONTAINERS=${p}
  fi
  for c in ${CONTAINERS}; do
    echo -n " ==> $c: commit..."
    ${DRY} docker commit -p -m saving ${c} save-${c} > /dev/null
    echo "ok"
  done
  echo " ==> done"
  exit 0
  ;;
update)
  echo "==> Grabbing latest dopam from GitHub"
  t=`mktemp dopam.XXXXXXX`
  curl -sL https://raw.githubusercontent.com/avsm/dopam/master/dopam -o $t
  chmod 755 $t
  echo "==> Updating local version of dopam"
  mv $t $(readlink $BASH_SOURCE)
  ;;
*)
  usage
esac
